function _typeof(e) {
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    }, _typeof(e)
}! function(e) {
    "function" == typeof define && define.amd ? define(["../widgets/datepicker"], e) : e(jQuery.datepicker)
}((function(e) {
    var t = $("html").attr("lang");
    return e.regional.vi = {
        closeText: "Đóng",
        prevText: "&#x3C;Trước",
        nextText: "Tiếp&#x3E;",
        currentText: "Hôm nay",
        monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
        monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
        dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
        dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        weekHeader: "Tu",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.ru = {
        closeText: "Закрыть",
        prevText: "&#x3C;Пред",
        nextText: "След&#x3E;",
        currentText: "Сегодня",
        monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
        dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"],
        dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        weekHeader: "Нед",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.jp = {
        closeText: "閉じる",
        prevText: "&#x3C;前",
        nextText: "次&#x3E;",
        currentText: "今日",
        monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        dayNames: ["日曜", "月曜", "火曜", "水曜", "木曜", "金曜", "土曜"],
        dayNamesShort: ["日", "月", "火", "水", "木", "金", "土"],
        dayNamesMin: ["日", "月", "火", "水", "木", "金", "土"],
        weekHeader: "週",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.cn = {
        closeText: "关闭",
        prevText: "&#x3C;上月",
        nextText: "下月&#x3E;",
        currentText: "今天",
        monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        monthNamesShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        dayNames: ["星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
        dayNamesShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
        dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"],
        weekHeader: "周",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.es = {
        closeText: "Cerrar",
        prevText: "&#x3C;Ant",
        nextText: "Sig&#x3E;",
        currentText: "Hoy",
        monthNames: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
        monthNamesShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        dayNames: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"],
        dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.fr = {
        closeText: "Fermer",
        prevText: "&#x3C;Préc",
        nextText: "Suiv&#x3E;",
        currentText: "Aujourd'hui",
        monthNames: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
        monthNamesShort: ["Janv.", "Févr.", "Mars", "Avr.", "Mai", "Juin", "Juil.", "Août", "Sept.", "Oct.", "Nov.", "Déc."],
        dayNames: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
        dayNamesShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.regional.ar = {
        closeText: "إغلاق",
        prevText: "&#x3C;السابق",
        nextText: "التالي&#x3E;",
        currentText: "اليوم",
        monthNames: ["كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
        monthNamesShort: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
        dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت", "الأحد"],
        dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
        dayNamesMin: ["ن", "ث", "ع", "خ", "ج", "س", "ح"],
        weekHeader: "أسبوع",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, e.setDefaults(e.regional[t]), e.regional[t]
}));
var DateFormatter, lang = $("html").attr("lang");
$.timepicker.regional = {
        vi: {
            hourText: "Giờ",
            minuteText: "Phút",
            amPmText: ["Sáng", "Chiều"],
            closeButtonText: "Đóng",
            nowButtonText: "Hiện tại",
            deselectButtonText: "Xóa"
        },
        ru: {
            hourText: "Часы",
            minuteText: "Минуты",
            amPmText: ["УТРА", "ВЕЧЕРА"],
            closeButtonText: "Закрыть",
            nowButtonText: "Сейчас",
            deselectButtonText: "Удалить"
        },
        jp: {
            hourText: "時間",
            minuteText: "分",
            amPmText: ["午前", "午後"],
            closeButtonText: "閉じる",
            nowButtonText: "現在",
            deselectButtonText: "削除"
        },
        cn: {
            hourText: "小时",
            minuteText: "分钟",
            amPmText: ["上午", "下午"],
            closeButtonText: "关闭",
            nowButtonText: "现在",
            deselectButtonText: "清除"
        },
        es: {
            hourText: "Hora",
            minuteText: "Minuto",
            amPmText: ["AM", "PM"],
            closeButtonText: "Cerrar",
            nowButtonText: "Ahora",
            deselectButtonText: "Deseleccionar"
        },
        fr: {
            hourText: "Heures",
            minuteText: "Minutes",
            amPmText: ["AM", "PM"],
            closeButtonText: "Fermer",
            nowButtonText: "Maintenant",
            deselectButtonText: "Désélectionner"
        },
        ar: {
            hourText: "ساعة",
            minuteText: "دقيقة",
            amPmText: ["صباحا", "مساء"],
            closeButtonText: "إغلاق",
            nowButtonText: "الآن",
            deselectButtonText: "إزالة الاختيار"
        }
    }, $.timepicker.setDefaults($.timepicker.regional[lang]),
    function() {
        "use strict";
        var e, t, a, n, r;
        e = function(e, t) {
            return "string" == typeof e && "string" == typeof t && e.toLowerCase() === t.toLowerCase()
        }, t = function(e, a, n) {
            var r = n || "0",
                o = e.toString();
            return o.length < a ? t(r + o, a) : o
        }, a = function(e) {
            var t, n;
            for (e = e || {}, t = 1; t < arguments.length; t++)
                if (n = arguments[t])
                    for (var r in n) n.hasOwnProperty(r) && ("object" == _typeof(n[r]) ? a(e[r], n[r]) : e[r] = n[r]);
            return e
        }, n = function(e, t) {
            for (var a = 0; a < t.length; a++)
                if (t[a].toLowerCase() === e.toLowerCase()) return a;
            return -1
        }, r = {
            dateSettings: {
                days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                meridiem: ["AM", "PM"],
                ordinal: function(e) {
                    var t = e % 10,
                        a = {
                            1: "st",
                            2: "nd",
                            3: "rd"
                        };
                    return 1 !== Math.floor(e % 100 / 10) && a[t] ? a[t] : "th"
                }
            },
            separators: /[ \-+\/\.T:@]/g,
            validParts: /[dDjlNSwzWFmMntLoYyaABgGhHisueTIOPZcrU]/g,
            intParts: /[djwNzmnyYhHgGis]/g,
            tzParts: /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
            tzClip: /[^-+\dA-Z]/g
        }, (DateFormatter = function(e) {
            var t = this,
                n = a(r, e);
            t.dateSettings = n.dateSettings, t.separators = n.separators, t.validParts = n.validParts, t.intParts = n.intParts, t.tzParts = n.tzParts, t.tzClip = n.tzClip
        }).prototype = {
            constructor: DateFormatter,
            getMonth: function(e) {
                var t;
                return 0 === (t = n(e, this.dateSettings.monthsShort) + 1) && (t = n(e, this.dateSettings.months) + 1), t
            },
            parseDate: function(t, a) {
                var n, r, o, i, s, d, u, l, f, c, m = this,
                    h = !1,
                    g = !1,
                    p = m.dateSettings,
                    y = {
                        date: null,
                        year: null,
                        month: null,
                        day: null,
                        hour: 0,
                        min: 0,
                        sec: 0
                    };
                if (!t) return null;
                if (t instanceof Date) return t;
                if ("U" === a) return (o = parseInt(t)) ? new Date(1e3 * o) : t;
                switch (_typeof(t)) {
                    case "number":
                        return new Date(t);
                    case "string":
                        break;
                    default:
                        return null
                }
                if (!(n = a.match(m.validParts)) || 0 === n.length) throw new Error("Invalid date format definition.");
                for (r = t.replace(m.separators, "\0").split("\0"), o = 0; o < r.length; o++) switch (i = r[o], s = parseInt(i), n[o]) {
                    case "y":
                    case "Y":
                        if (!s) return null;
                        f = i.length, y.year = 2 === f ? parseInt((s < 70 ? "20" : "19") + i) : s, h = !0;
                        break;
                    case "m":
                    case "n":
                    case "M":
                    case "F":
                        if (isNaN(s)) {
                            if (!(0 < (d = m.getMonth(i)))) return null;
                            y.month = d
                        } else {
                            if (!(1 <= s && s <= 12)) return null;
                            y.month = s
                        }
                        h = !0;
                        break;
                    case "d":
                    case "j":
                        if (!(1 <= s && s <= 31)) return null;
                        y.day = s, h = !0;
                        break;
                    case "g":
                    case "h":
                        if (c = r[u = -1 < n.indexOf("a") ? n.indexOf("a") : -1 < n.indexOf("A") ? n.indexOf("A") : -1], -1 < u) l = e(c, p.meridiem[0]) ? 0 : e(c, p.meridiem[1]) ? 12 : -1, 1 <= s && s <= 12 && -1 < l ? y.hour = s + l - 1 : 0 <= s && s <= 23 && (y.hour = s);
                        else {
                            if (!(0 <= s && s <= 23)) return null;
                            y.hour = s
                        }
                        g = !0;
                        break;
                    case "G":
                    case "H":
                        if (!(0 <= s && s <= 23)) return null;
                        y.hour = s, g = !0;
                        break;
                    case "i":
                        if (!(0 <= s && s <= 59)) return null;
                        y.min = s, g = !0;
                        break;
                    case "s":
                        if (!(0 <= s && s <= 59)) return null;
                        y.sec = s, g = !0
                }
                if (!0 === h && y.year && y.month && y.day) y.date = new Date(y.year, y.month - 1, y.day, y.hour, y.min, y.sec, 0);
                else {
                    if (!0 !== g) return null;
                    y.date = new Date(0, 0, 0, y.hour, y.min, y.sec, 0)
                }
                return y.date
            },
            guessDate: function(e, t) {
                if ("string" != typeof e) return e;
                var a, n, r, o, i, s, d = e.replace(this.separators, "\0").split("\0"),
                    u = t.match(this.validParts),
                    l = new Date,
                    f = 0;
                if (!/^[djmn]/g.test(u[0])) return e;
                for (r = 0; r < d.length; r++) {
                    if (f = 2, i = d[r], s = parseInt(i.substr(0, 2)), isNaN(s)) return null;
                    switch (r) {
                        case 0:
                            "m" === u[0] || "n" === u[0] ? l.setMonth(s - 1) : l.setDate(s);
                            break;
                        case 1:
                            "m" === u[0] || "n" === u[0] ? l.setDate(s) : l.setMonth(s - 1);
                            break;
                        case 2:
                            if (n = l.getFullYear(), f = (a = i.length) < 4 ? a : 4, !(n = parseInt(a < 4 ? n.toString().substr(0, 4 - a) + i : i.substr(0, 4)))) return null;
                            l.setFullYear(n);
                            break;
                        case 3:
                            l.setHours(s);
                            break;
                        case 4:
                            l.setMinutes(s);
                            break;
                        case 5:
                            l.setSeconds(s)
                    }
                    0 < (o = i.substr(f)).length && d.splice(r + 1, 0, o)
                }
                return l
            },
            parseFormat: function(e, a) {
                var n, r = this,
                    o = r.dateSettings,
                    i = /\\?(.?)/gi,
                    s = function(e, t) {
                        return n[e] ? n[e]() : t
                    };
                return n = {
                    d: function() {
                        return t(n.j(), 2)
                    },
                    D: function() {
                        return o.daysShort[n.w()]
                    },
                    j: function() {
                        return a.getDate()
                    },
                    l: function() {
                        return o.days[n.w()]
                    },
                    N: function() {
                        return n.w() || 7
                    },
                    w: function() {
                        return a.getDay()
                    },
                    z: function() {
                        var e = new Date(n.Y(), n.n() - 1, n.j()),
                            t = new Date(n.Y(), 0, 1);
                        return Math.round((e - t) / 864e5)
                    },
                    W: function() {
                        var e = new Date(n.Y(), n.n() - 1, n.j() - n.N() + 3),
                            a = new Date(e.getFullYear(), 0, 4);
                        return t(1 + Math.round((e - a) / 864e5 / 7), 2)
                    },
                    F: function() {
                        return o.months[a.getMonth()]
                    },
                    m: function() {
                        return t(n.n(), 2)
                    },
                    M: function() {
                        return o.monthsShort[a.getMonth()]
                    },
                    n: function() {
                        return a.getMonth() + 1
                    },
                    t: function() {
                        return new Date(n.Y(), n.n(), 0).getDate()
                    },
                    L: function() {
                        var e = n.Y();
                        return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 1 : 0
                    },
                    o: function() {
                        var e = n.n(),
                            t = n.W();
                        return n.Y() + (12 === e && t < 9 ? 1 : 1 === e && 9 < t ? -1 : 0)
                    },
                    Y: function() {
                        return a.getFullYear()
                    },
                    y: function() {
                        return n.Y().toString().slice(-2)
                    },
                    a: function() {
                        return n.A().toLowerCase()
                    },
                    A: function() {
                        var e = n.G() < 12 ? 0 : 1;
                        return o.meridiem[e]
                    },
                    B: function() {
                        var e = 3600 * a.getUTCHours(),
                            n = 60 * a.getUTCMinutes(),
                            r = a.getUTCSeconds();
                        return t(Math.floor((e + n + r + 3600) / 86.4) % 1e3, 3)
                    },
                    g: function() {
                        return n.G() % 12 || 12
                    },
                    G: function() {
                        return a.getHours()
                    },
                    h: function() {
                        return t(n.g(), 2)
                    },
                    H: function() {
                        return t(n.G(), 2)
                    },
                    i: function() {
                        return t(a.getMinutes(), 2)
                    },
                    s: function() {
                        return t(a.getSeconds(), 2)
                    },
                    u: function() {
                        return t(1e3 * a.getMilliseconds(), 6)
                    },
                    e: function() {
                        return /\((.*)\)/.exec(String(a))[1] || "Coordinated Universal Time"
                    },
                    I: function() {
                        return new Date(n.Y(), 0) - Date.UTC(n.Y(), 0) != new Date(n.Y(), 6) - Date.UTC(n.Y(), 6) ? 1 : 0
                    },
                    O: function() {
                        var e = a.getTimezoneOffset(),
                            n = Math.abs(e);
                        return (0 < e ? "-" : "+") + t(100 * Math.floor(n / 60) + n % 60, 4)
                    },
                    P: function() {
                        var e = n.O();
                        return e.substr(0, 3) + ":" + e.substr(3, 2)
                    },
                    T: function() {
                        return (String(a).match(r.tzParts) || [""]).pop().replace(r.tzClip, "") || "UTC"
                    },
                    Z: function() {
                        return 60 * -a.getTimezoneOffset()
                    },
                    c: function() {
                        return "Y-m-d\\TH:i:sP".replace(i, s)
                    },
                    r: function() {
                        return "D, d M Y H:i:s O".replace(i, s)
                    },
                    U: function() {
                        return a.getTime() / 1e3 || 0
                    }
                }, s(e, e)
            },
            formatDate: function(e, t) {
                var a, n, r, o, i, s = "";
                if ("string" == typeof e && !(e = this.parseDate(e, t))) return null;
                if (e instanceof Date) {
                    for (r = t.length, a = 0; a < r; a++) "S" !== (i = t.charAt(a)) && "\\" !== i && (0 < a && "\\" === t.charAt(a - 1) ? s += i : (o = this.parseFormat(i, e), a !== r - 1 && this.intParts.test(i) && "S" === t.charAt(a + 1) && (n = parseInt(o) || 0, o += this.dateSettings.ordinal(n)), s += o));
                    return s
                }
                return ""
            }
        }
    }();
var datetimepickerFactory = function(e) {
    "use strict";
    var t = {
            i18n: {
                ar: {
                    months: ["كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
                    dayOfWeekShort: ["ن", "ث", "ع", "خ", "ج", "س", "ح"],
                    dayOfWeek: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت", "الأحد"]
                },
                ro: {
                    months: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
                    dayOfWeekShort: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"],
                    dayOfWeek: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"]
                },
                id: {
                    months: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"],
                    dayOfWeekShort: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
                    dayOfWeek: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                },
                is: {
                    months: ["Janúar", "Febrúar", "Mars", "Apríl", "Maí", "Júní", "Júlí", "Ágúst", "September", "Október", "Nóvember", "Desember"],
                    dayOfWeekShort: ["Sun", "Mán", "Þrið", "Mið", "Fim", "Fös", "Lau"],
                    dayOfWeek: ["Sunnudagur", "Mánudagur", "Þriðjudagur", "Miðvikudagur", "Fimmtudagur", "Föstudagur", "Laugardagur"]
                },
                bg: {
                    months: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"],
                    dayOfWeekShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                    dayOfWeek: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"]
                },
                fa: {
                    months: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
                    dayOfWeekShort: ["یکشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                    dayOfWeek: ["یک‌شنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنج‌شنبه", "جمعه", "شنبه", "یک‌شنبه"]
                },
                ru: {
                    months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
                    dayOfWeekShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                    dayOfWeek: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"]
                },
                uk: {
                    months: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
                    dayOfWeekShort: ["Ндл", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Сбт"],
                    dayOfWeek: ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота"]
                },
                en: {
                    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
                },
                el: {
                    months: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
                    dayOfWeekShort: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                    dayOfWeek: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"]
                },
                de: {
                    months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                    dayOfWeekShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                    dayOfWeek: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
                },
                nl: {
                    months: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
                    dayOfWeekShort: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                    dayOfWeek: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"]
                },
                tr: {
                    months: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
                    dayOfWeekShort: ["Paz", "Pts", "Sal", "Çar", "Per", "Cum", "Cts"],
                    dayOfWeek: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"]
                },
                fr: {
                    months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
                    dayOfWeekShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
                    dayOfWeek: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"]
                },
                es: {
                    months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                    dayOfWeekShort: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"],
                    dayOfWeek: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"]
                },
                th: {
                    months: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"],
                    dayOfWeekShort: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                    dayOfWeek: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัส", "ศุกร์", "เสาร์", "อาทิตย์"]
                },
                pl: {
                    months: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień"],
                    dayOfWeekShort: ["nd", "pn", "wt", "śr", "cz", "pt", "sb"],
                    dayOfWeek: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"]
                },
                pt: {
                    months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                    dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
                    dayOfWeek: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"]
                },
                cn: {
                    months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"],
                    dayOfWeek: ["星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
                },
                se: {
                    months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
                    dayOfWeekShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"]
                },
                km: {
                    months: ["មករា​", "កុម្ភៈ", "មិនា​", "មេសា​", "ឧសភា​", "មិថុនា​", "កក្កដា​", "សីហា​", "កញ្ញា​", "តុលា​", "វិច្ឆិកា", "ធ្នូ​"],
                    dayOfWeekShort: ["អាទិ​", "ច័ន្ទ​", "អង្គារ​", "ពុធ​", "ព្រហ​​", "សុក្រ​", "សៅរ៍"],
                    dayOfWeek: ["អាទិត្យ​", "ច័ន្ទ​", "អង្គារ​", "ពុធ​", "ព្រហស្បតិ៍​", "សុក្រ​", "សៅរ៍"]
                },
                kr: {
                    months: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
                    dayOfWeekShort: ["일", "월", "화", "수", "목", "금", "토"],
                    dayOfWeek: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"]
                },
                it: {
                    months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
                    dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
                    dayOfWeek: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"]
                },
                da: {
                    months: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"],
                    dayOfWeekShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"],
                    dayOfWeek: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"]
                },
                no: {
                    months: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
                    dayOfWeekShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"],
                    dayOfWeek: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"]
                },
                jp: {
                    months: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
                    dayOfWeekShort: ["日", "月", "火", "水", "木", "金", "土"],
                    dayOfWeek: ["日曜", "月曜", "火曜", "水曜", "木曜", "金曜", "土曜"]
                },
                vi: {
                    months: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
                    dayOfWeekShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                    dayOfWeek: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"]
                },
                sl: {
                    months: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
                    dayOfWeekShort: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"],
                    dayOfWeek: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"]
                },
                cs: {
                    months: ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
                    dayOfWeekShort: ["Ne", "Po", "Út", "St", "Čt", "Pá", "So"]
                },
                hu: {
                    months: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
                    dayOfWeekShort: ["Va", "Hé", "Ke", "Sze", "Cs", "Pé", "Szo"],
                    dayOfWeek: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"]
                },
                az: {
                    months: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"],
                    dayOfWeekShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                    dayOfWeek: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"]
                },
                bs: {
                    months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
                    dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
                    dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"]
                },
                ca: {
                    months: ["Gener", "Febrer", "Març", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"],
                    dayOfWeekShort: ["Dg", "Dl", "Dt", "Dc", "Dj", "Dv", "Ds"],
                    dayOfWeek: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"]
                },
                "en-GB": {
                    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
                },
                et: {
                    months: ["Jaanuar", "Veebruar", "Märts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember"],
                    dayOfWeekShort: ["P", "E", "T", "K", "N", "R", "L"],
                    dayOfWeek: ["Pühapäev", "Esmaspäev", "Teisipäev", "Kolmapäev", "Neljapäev", "Reede", "Laupäev"]
                },
                eu: {
                    months: ["Urtarrila", "Otsaila", "Martxoa", "Apirila", "Maiatza", "Ekaina", "Uztaila", "Abuztua", "Iraila", "Urria", "Azaroa", "Abendua"],
                    dayOfWeekShort: ["Ig.", "Al.", "Ar.", "Az.", "Og.", "Or.", "La."],
                    dayOfWeek: ["Igandea", "Astelehena", "Asteartea", "Asteazkena", "Osteguna", "Ostirala", "Larunbata"]
                },
                fi: {
                    months: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
                    dayOfWeekShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
                    dayOfWeek: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"]
                },
                gl: {
                    months: ["Xan", "Feb", "Maz", "Abr", "Mai", "Xun", "Xul", "Ago", "Set", "Out", "Nov", "Dec"],
                    dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Xov", "Ven", "Sab"],
                    dayOfWeek: ["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"]
                },
                hr: {
                    months: ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"],
                    dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
                    dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"]
                },
                ko: {
                    months: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
                    dayOfWeekShort: ["일", "월", "화", "수", "목", "금", "토"],
                    dayOfWeek: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"]
                },
                lt: {
                    months: ["Sausio", "Vasario", "Kovo", "Balandžio", "Gegužės", "Birželio", "Liepos", "Rugpjūčio", "Rugsėjo", "Spalio", "Lapkričio", "Gruodžio"],
                    dayOfWeekShort: ["Sek", "Pir", "Ant", "Tre", "Ket", "Pen", "Šeš"],
                    dayOfWeek: ["Sekmadienis", "Pirmadienis", "Antradienis", "Trečiadienis", "Ketvirtadienis", "Penktadienis", "Šeštadienis"]
                },
                lv: {
                    months: ["Janvāris", "Februāris", "Marts", "Aprīlis ", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"],
                    dayOfWeekShort: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "St"],
                    dayOfWeek: ["Svētdiena", "Pirmdiena", "Otrdiena", "Trešdiena", "Ceturtdiena", "Piektdiena", "Sestdiena"]
                },
                mk: {
                    months: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември"],
                    dayOfWeekShort: ["нед", "пон", "вто", "сре", "чет", "пет", "саб"],
                    dayOfWeek: ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"]
                },
                mn: {
                    months: ["1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар"],
                    dayOfWeekShort: ["Дав", "Мяг", "Лха", "Пүр", "Бсн", "Бям", "Ням"],
                    dayOfWeek: ["Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба", "Ням"]
                },
                "pt-BR": {
                    months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                    dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
                    dayOfWeek: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"]
                },
                sk: {
                    months: ["Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December"],
                    dayOfWeekShort: ["Ne", "Po", "Ut", "St", "Št", "Pi", "So"],
                    dayOfWeek: ["Nedeľa", "Pondelok", "Utorok", "Streda", "Štvrtok", "Piatok", "Sobota"]
                },
                sq: {
                    months: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "Nëntor", "Dhjetor"],
                    dayOfWeekShort: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Shtu"],
                    dayOfWeek: ["E Diel", "E Hënë", "E Martē", "E Mërkurë", "E Enjte", "E Premte", "E Shtunë"]
                },
                "sr-YU": {
                    months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
                    dayOfWeekShort: ["Ned", "Pon", "Uto", "Sre", "čet", "Pet", "Sub"],
                    dayOfWeek: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"]
                },
                sr: {
                    months: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар"],
                    dayOfWeekShort: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                    dayOfWeek: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"]
                },
                sv: {
                    months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
                    dayOfWeekShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
                    dayOfWeek: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"]
                },
                "zh-TW": {
                    months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"],
                    dayOfWeek: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
                },
                zh: {
                    months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"],
                    dayOfWeek: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
                },
                ug: {
                    months: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي"],
                    dayOfWeek: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"]
                },
                he: {
                    months: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
                    dayOfWeekShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"],
                    dayOfWeek: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת", "ראשון"]
                },
                hy: {
                    months: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր"],
                    dayOfWeekShort: ["Կի", "Երկ", "Երք", "Չոր", "Հնգ", "Ուրբ", "Շբթ"],
                    dayOfWeek: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "Ուրբաթ", "Շաբաթ"]
                },
                kg: {
                    months: ["Үчтүн айы", "Бирдин айы", "Жалган Куран", "Чын Куран", "Бугу", "Кулжа", "Теке", "Баш Оона", "Аяк Оона", "Тогуздун айы", "Жетинин айы", "Бештин айы"],
                    dayOfWeekShort: ["Жек", "Дүй", "Шей", "Шар", "Бей", "Жум", "Ише"],
                    dayOfWeek: ["Жекшемб", "Дүйшөмб", "Шейшемб", "Шаршемб", "Бейшемби", "Жума", "Ишенб"]
                },
                rm: {
                    months: ["Schaner", "Favrer", "Mars", "Avrigl", "Matg", "Zercladur", "Fanadur", "Avust", "Settember", "October", "November", "December"],
                    dayOfWeekShort: ["Du", "Gli", "Ma", "Me", "Gie", "Ve", "So"],
                    dayOfWeek: ["Dumengia", "Glindesdi", "Mardi", "Mesemna", "Gievgia", "Venderdi", "Sonda"]
                },
                ka: {
                    months: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"],
                    dayOfWeekShort: ["კვ", "ორშ", "სამშ", "ოთხ", "ხუთ", "პარ", "შაბ"],
                    dayOfWeek: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"]
                }
            },
            ownerDocument: document,
            contentWindow: window,
            value: "",
            rtl: !1,
            format: "Y/m/d H:i",
            formatTime: "H:i",
            formatDate: "Y/m/d",
            startDate: !1,
            step: 60,
            monthChangeSpinner: !0,
            closeOnDateSelect: !1,
            closeOnTimeSelect: !0,
            closeOnWithoutClick: !0,
            closeOnInputClick: !0,
            openOnFocus: !0,
            timepicker: !0,
            datepicker: !0,
            weeks: !1,
            defaultTime: !1,
            defaultDate: !1,
            minDate: !1,
            maxDate: !1,
            minTime: !1,
            maxTime: !1,
            minDateTime: !1,
            maxDateTime: !1,
            allowTimes: [],
            opened: !1,
            initTime: !0,
            inline: !1,
            theme: "",
            touchMovedThreshold: 5,
            onSelectDate: function() {},
            onSelectTime: function() {},
            onChangeMonth: function() {},
            onGetWeekOfYear: function() {},
            onChangeYear: function() {},
            onChangeDateTime: function() {},
            onShow: function() {},
            onClose: function() {},
            onGenerate: function() {},
            withoutCopyright: !0,
            inverseButton: !1,
            hours12: !1,
            next: "xdsoft_next",
            prev: "xdsoft_prev",
            dayOfWeekStart: 0,
            parentID: "body",
            timeHeightInTimePicker: 25,
            timepickerScrollbar: !0,
            todayButton: !0,
            prevButton: !0,
            nextButton: !0,
            defaultSelect: !0,
            scrollMonth: !0,
            scrollTime: !0,
            scrollInput: !0,
            lazyInit: !1,
            mask: !1,
            validateOnBlur: !0,
            allowBlank: !0,
            yearStart: 1950,
            yearEnd: 2050,
            monthStart: 0,
            monthEnd: 11,
            style: "",
            id: "",
            fixed: !1,
            roundTime: "round",
            className: "",
            weekends: [],
            highlightedDates: [],
            highlightedPeriods: [],
            allowDates: [],
            allowDateRe: null,
            disabledDates: [],
            disabledWeekDays: [],
            yearOffset: 0,
            beforeShowDay: null,
            enterLikeTab: !0,
            showApplyButton: !1,
            insideParent: !1
        },
        a = null,
        n = null,
        r = "en",
        o = {
            meridiem: ["AM", "PM"]
        },
        i = function() {
            var i = t.i18n[r],
                s = {
                    days: i.dayOfWeek,
                    daysShort: i.dayOfWeekShort,
                    months: i.months,
                    monthsShort: e.map(i.months, (function(e) {
                        return e.substring(0, 3)
                    }))
                };
            "function" == typeof DateFormatter && (a = n = new DateFormatter({
                dateSettings: e.extend({}, o, s)
            }))
        },
        s = {
            moment: {
                default_options: {
                    format: "YYYY/MM/DD HH:mm",
                    formatDate: "YYYY/MM/DD",
                    formatTime: "HH:mm"
                },
                formatter: {
                    parseDate: function(e, t) {
                        if (u(t)) return n.parseDate(e, t);
                        var a = moment(e, t);
                        return !!a.isValid() && a.toDate()
                    },
                    formatDate: function(e, t) {
                        return u(t) ? n.formatDate(e, t) : moment(e).format(t)
                    },
                    formatMask: function(e) {
                        return e.replace(/Y{4}/g, "9999").replace(/Y{2}/g, "99").replace(/M{2}/g, "19").replace(/D{2}/g, "39").replace(/H{2}/g, "29").replace(/m{2}/g, "59").replace(/s{2}/g, "59")
                    }
                }
            }
        };
    e.datetimepicker = {
        setLocale: function(e) {
            var a = t.i18n[e] ? e : "en";
            r !== a && (r = a, i())
        },
        setDateFormatter: function(n) {
            if ("string" == typeof n && s.hasOwnProperty(n)) {
                var r = s[n];
                e.extend(t, r.default_options), a = r.formatter
            } else a = n
        }
    };
    var d = {
            RFC_2822: "D, d M Y H:i:s O",
            ATOM: "Y-m-dTH:i:sP",
            ISO_8601: "Y-m-dTH:i:sO",
            RFC_822: "D, d M y H:i:s O",
            RFC_850: "l, d-M-y H:i:s T",
            RFC_1036: "D, d M y H:i:s O",
            RFC_1123: "D, d M Y H:i:s O",
            RSS: "D, d M Y H:i:s O",
            W3C: "Y-m-dTH:i:sP"
        },
        u = function(e) {
            return -1 !== Object.values(d).indexOf(e)
        };

    function l(e, t, a) {
        this.date = e, this.desc = t, this.style = a
    }
    e.extend(e.datetimepicker, d), i(), window.getComputedStyle || (window.getComputedStyle = function(e) {
        return this.el = e, this.getPropertyValue = function(t) {
            var a = /(-([a-z]))/g;
            return "float" === t && (t = "styleFloat"), a.test(t) && (t = t.replace(a, (function(e, t, a) {
                return a.toUpperCase()
            }))), e.currentStyle[t] || null
        }, this
    }), Array.prototype.indexOf || (Array.prototype.indexOf = function(e, t) {
        var a, n;
        for (a = t || 0, n = this.length; a < n; a += 1)
            if (this[a] === e) return a;
        return -1
    }), Date.prototype.countDaysInMonth = function() {
        return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate()
    }, e.fn.xdsoftScroller = function(t, a) {
        return this.each((function() {
            var n, r, o, i, s, d = e(this),
                u = function(e) {
                    var t, a = {
                        x: 0,
                        y: 0
                    };
                    return "touchstart" === e.type || "touchmove" === e.type || "touchend" === e.type || "touchcancel" === e.type ? (t = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], a.x = t.clientX, a.y = t.clientY) : "mousedown" !== e.type && "mouseup" !== e.type && "mousemove" !== e.type && "mouseover" !== e.type && "mouseout" !== e.type && "mouseenter" !== e.type && "mouseleave" !== e.type || (a.x = e.clientX, a.y = e.clientY), a
                },
                l = 0,
                f = 100,
                c = !1,
                m = 0,
                h = 0,
                g = 0,
                p = !1,
                y = 0,
                x = function() {};
            "hide" !== a ? (e(this).hasClass("xdsoft_scroller_box") || (n = d.children().eq(0), l = Math.abs(parseInt(n.css("marginTop"), 10)), r = d[0].clientHeight, o = n[0].offsetHeight, i = e('<div class="xdsoft_scrollbar"></div>'), s = e('<div class="xdsoft_scroller"></div>'), i.append(s), d.addClass("xdsoft_scroller_box").append(i), x = function(e) {
                var t = u(e).y - m + y;
                t < 0 && (t = 0), t + s[0].offsetHeight > g && (t = g - s[0].offsetHeight), d.trigger("scroll_element.xdsoft_scroller", [f ? t / f : 0])
            }, s.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller", (function(n) {
                r || d.trigger("resize_scroll.xdsoft_scroller", [a]), m = u(n).y, y = parseInt(s.css("marginTop"), 10), g = i[0].offsetHeight, "mousedown" === n.type || "touchstart" === n.type ? (t.ownerDocument && e(t.ownerDocument.body).addClass("xdsoft_noselect"), e([t.ownerDocument.body, t.contentWindow]).on("touchend mouseup.xdsoft_scroller", (function a() {
                    e([t.ownerDocument.body, t.contentWindow]).off("touchend mouseup.xdsoft_scroller", a).off("mousemove.xdsoft_scroller", x).removeClass("xdsoft_noselect")
                })), e(t.ownerDocument.body).on("mousemove.xdsoft_scroller", x)) : (p = !0, n.stopPropagation(), n.preventDefault())
            })).on("touchmove", (function(e) {
                p && (e.preventDefault(), x(e))
            })).on("touchend touchcancel", (function() {
                p = !1, y = 0
            })), d.on("scroll_element.xdsoft_scroller", (function(e, t) {
                r || d.trigger("resize_scroll.xdsoft_scroller", [t, !0]), t = 1 < t ? 1 : t < 0 || isNaN(t) ? 0 : t, l = parseFloat(Math.abs((n[0].offsetHeight - r) * t).toFixed(4)), s.css("marginTop", f * t), n.css("marginTop", -l)
            })).on("resize_scroll.xdsoft_scroller", (function(e, t, a) {
                var u, c;
                r = d[0].clientHeight, o = n[0].offsetHeight, c = (u = r / o) * i[0].offsetHeight, 1 < u ? s.hide() : (s.show(), s.css("height", parseInt(10 < c ? c : 10, 10)), f = i[0].offsetHeight - s[0].offsetHeight, !0 !== a && d.trigger("scroll_element.xdsoft_scroller", [t || l / (o - r)]))
            })), d.on("mousewheel", (function(e) {
                var t, a, n = (a = 0, "detail" in (t = e.originalEvent) && (a = t.detail), "wheelDelta" in t && (a = -t.wheelDelta / 120), "wheelDeltaY" in t && (a = -t.wheelDeltaY / 120), "axis" in t && t.axis === t.HORIZONTAL_AXIS && (a = 0), a *= 10, "deltaY" in t && (a = t.deltaY), a && t.deltaMode && (1 === t.deltaMode ? a *= 40 : a *= 800), a),
                    i = Math.max(0, l - n);
                return d.trigger("scroll_element.xdsoft_scroller", [i / (o - r)]), e.stopPropagation(), !1
            })), d.on("touchstart", (function(e) {
                c = u(e), h = l
            })), d.on("touchmove", (function(e) {
                if (c) {
                    e.preventDefault();
                    var t = u(e);
                    d.trigger("scroll_element.xdsoft_scroller", [(h - (t.y - c.y)) / (o - r)])
                }
            })), d.on("touchend touchcancel", (function() {
                c = !1, h = 0
            }))), d.trigger("resize_scroll.xdsoft_scroller", [a])) : d.find(".xdsoft_scrollbar").hide()
        }))
    }, e.fn.datetimepicker = function(n, o) {
        var i, s, d = this,
            u = 17,
            f = 13,
            c = 27,
            m = 37,
            h = 38,
            g = 39,
            p = 40,
            y = 9,
            x = 116,
            T = 65,
            D = 67,
            v = 86,
            b = 90,
            k = 89,
            S = !1,
            M = e.isPlainObject(n) || !n ? e.extend(!0, {}, t, n) : e.extend(!0, {}, t),
            w = 0;
        return i = function(t) {
            var o, i, s, d, w, O, _ = e('<div class="xdsoft_datetimepicker xdsoft_noselect"></div>'),
                W = e('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>'),
                F = e('<div class="xdsoft_datepicker active"></div>'),
                C = e('<div class="xdsoft_monthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>'),
                P = e('<div class="xdsoft_calendar"></div>'),
                A = e('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>'),
                Y = A.find(".xdsoft_time_box").eq(0),
                N = e('<div class="xdsoft_time_variant"></div>'),
                H = e('<button type="button" class="xdsoft_save_selected blue-gradient-button">Save Selected</button>'),
                J = e('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>'),
                j = e('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>'),
                z = !1,
                L = 0;
            M.id && _.attr("id", M.id), M.style && _.attr("style", M.style), M.weeks && _.addClass("xdsoft_showweeks"), M.rtl && _.addClass("xdsoft_rtl"), _.addClass("xdsoft_" + M.theme), _.addClass(M.className), C.find(".xdsoft_month span").after(J), C.find(".xdsoft_year span").after(j), C.find(".xdsoft_month,.xdsoft_year").on("touchstart mousedown.xdsoft", (function(t) {
                var a, n, r = e(this).find(".xdsoft_select").eq(0),
                    o = 0,
                    i = 0,
                    s = r.is(":visible");
                for (C.find(".xdsoft_select").hide(), w.currentTime && (o = w.currentTime[e(this).hasClass("xdsoft_month") ? "getMonth" : "getFullYear"]()), r[s ? "hide" : "show"](), a = r.find("div.xdsoft_option"), n = 0; n < a.length && a.eq(n).data("value") !== o; n += 1) i += a[0].offsetHeight;
                return r.xdsoftScroller(M, i / (r.children()[0].offsetHeight - r[0].clientHeight)), t.stopPropagation(), !1
            }));
            var I = function(e) {
                var t = e.originalEvent,
                    a = t.touches ? t.touches[0] : t;
                this.touchStartPosition = this.touchStartPosition || a;
                var n = Math.abs(this.touchStartPosition.clientX - a.clientX),
                    r = Math.abs(this.touchStartPosition.clientY - a.clientY);
                Math.sqrt(n * n + r * r) > M.touchMovedThreshold && (this.touchMoved = !0)
            };

            function B() {
                var e, a = !1;
                return M.startDate ? a = w.strToDate(M.startDate) : (a = M.value || (t && t.val && t.val() ? t.val() : "")) ? (a = w.strToDateTime(a), M.yearOffset && (a = new Date(a.getFullYear() - M.yearOffset, a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds()))) : M.defaultDate && (a = w.strToDateTime(M.defaultDate), M.defaultTime && (e = w.strtotime(M.defaultTime), a.setHours(e.getHours()), a.setMinutes(e.getMinutes()))), a && w.isValidDate(a) ? _.data("changed", !0) : a = "", a || 0
            }

            function E(n) {
                var r = function(e, t) {
                        var a = e.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g, "\\$1").replace(/_/g, "{digit+}").replace(/([0-9]{1})/g, "{digit$1}").replace(/\{digit([0-9]{1})\}/g, "[0-$1_]{1}").replace(/\{digit[\+]\}/g, "[0-9_]{1}");
                        return new RegExp(a).test(t)
                    },
                    o = function(e, t) {
                        if (!(e = "string" == typeof e || e instanceof String ? n.ownerDocument.getElementById(e) : e)) return !1;
                        if (e.createTextRange) {
                            var a = e.createTextRange();
                            return a.collapse(!0), a.moveEnd("character", t), a.moveStart("character", t), a.select(), !0
                        }
                        return !!e.setSelectionRange && (e.setSelectionRange(t, t), !0)
                    };
                n.mask && t.off("keydown.xdsoft"), !0 === n.mask && (a.formatMask ? n.mask = a.formatMask(n.format) : n.mask = n.format.replace(/Y/g, "9999").replace(/F/g, "9999").replace(/m/g, "19").replace(/d/g, "39").replace(/H/g, "29").replace(/i/g, "59").replace(/s/g, "59")), "string" === e.type(n.mask) && (r(n.mask, t.val()) || (t.val(n.mask.replace(/[0-9]/g, "_")), o(t[0], 0)), t.on("paste.xdsoft", (function(a) {
                    var i = (a.clipboardData || a.originalEvent.clipboardData || window.clipboardData).getData("text"),
                        s = this.value,
                        d = this.selectionStart;
                    return s = s.substr(0, d) + i + s.substr(d + i.length), d += i.length, r(n.mask, s) ? (this.value = s, o(this, d)) : "" === e.trim(s) ? this.value = n.mask.replace(/[0-9]/g, "_") : t.trigger("error_input.xdsoft"), a.preventDefault(), !1
                })), t.on("keydown.xdsoft", (function(a) {
                    var i, s = this.value,
                        d = a.which,
                        l = this.selectionStart,
                        M = this.selectionEnd,
                        w = l !== M;
                    if (48 <= d && d <= 57 || 96 <= d && d <= 105 || 8 === d || 46 === d) {
                        for (i = 8 === d || 46 === d ? "_" : String.fromCharCode(96 <= d && d <= 105 ? d - 48 : d), 8 === d && l && !w && (l -= 1);;) {
                            var O = n.mask.substr(l, 1),
                                _ = l < n.mask.length,
                                W = 0 < l;
                            if (!(/[^0-9_]/.test(O) && _ && W)) break;
                            l += 8 !== d || w ? 1 : -1
                        }
                        if (a.metaKey && (w = !(l = 0)), w) {
                            var F = M - l,
                                C = n.mask.replace(/[0-9]/g, "_"),
                                P = C.substr(l, F).substr(1);
                            s = s.substr(0, l) + (i + P) + s.substr(l + F)
                        } else s = s.substr(0, l) + i + s.substr(l + 1);
                        if ("" === e.trim(s)) s = C;
                        else if (l === n.mask.length) return a.preventDefault(), !1;
                        for (l += 8 === d ? 0 : 1;
                            /[^0-9_]/.test(n.mask.substr(l, 1)) && l < n.mask.length && 0 < l;) l += 8 === d ? 0 : 1;
                        r(n.mask, s) ? (this.value = s, o(this, l)) : "" === e.trim(s) ? this.value = n.mask.replace(/[0-9]/g, "_") : t.trigger("error_input.xdsoft")
                    } else if (-1 !== [T, D, v, b, k].indexOf(d) && S || -1 !== [c, h, p, m, g, x, u, y, f].indexOf(d)) return !0;
                    return a.preventDefault(), !1
                })))
            }
            C.find(".xdsoft_select").xdsoftScroller(M).on("touchstart mousedown.xdsoft", (function(e) {
                var t = e.originalEvent;
                this.touchMoved = !1, this.touchStartPosition = t.touches ? t.touches[0] : t, e.stopPropagation(), e.preventDefault()
            })).on("touchmove", ".xdsoft_option", I).on("touchend mousedown.xdsoft", ".xdsoft_option", (function() {
                if (!this.touchMoved) {
                    void 0 !== w.currentTime && null !== w.currentTime || (w.currentTime = w.now());
                    var t = w.currentTime.getFullYear();
                    w && w.currentTime && w.currentTime[e(this).parent().parent().hasClass("xdsoft_monthselect") ? "setMonth" : "setFullYear"](e(this).data("value")), e(this).parent().parent().hide(), _.trigger("xchange.xdsoft"), M.onChangeMonth && e.isFunction(M.onChangeMonth) && M.onChangeMonth.call(_, w.currentTime, _.data("input")), t !== w.currentTime.getFullYear() && e.isFunction(M.onChangeYear) && M.onChangeYear.call(_, w.currentTime, _.data("input"))
                }
            })), _.getValue = function() {
                return w.getCurrentTime()
            }, _.setOptions = function(n) {
                var r = {};
                M = e.extend(!0, {}, M, n), n.allowTimes && e.isArray(n.allowTimes) && n.allowTimes.length && (M.allowTimes = e.extend(!0, [], n.allowTimes)), n.weekends && e.isArray(n.weekends) && n.weekends.length && (M.weekends = e.extend(!0, [], n.weekends)), n.allowDates && e.isArray(n.allowDates) && n.allowDates.length && (M.allowDates = e.extend(!0, [], n.allowDates)), n.allowDateRe && "[object String]" === Object.prototype.toString.call(n.allowDateRe) && (M.allowDateRe = new RegExp(n.allowDateRe)), n.highlightedDates && e.isArray(n.highlightedDates) && n.highlightedDates.length && (e.each(n.highlightedDates, (function(t, n) {
                    var o, i = e.map(n.split(","), e.trim),
                        s = new l(a.parseDate(i[0], M.formatDate), i[1], i[2]),
                        d = a.formatDate(s.date, M.formatDate);
                    void 0 !== r[d] ? (o = r[d].desc) && o.length && s.desc && s.desc.length && (r[d].desc = o + "\n" + s.desc) : r[d] = s
                })), M.highlightedDates = e.extend(!0, [], r)), n.highlightedPeriods && e.isArray(n.highlightedPeriods) && n.highlightedPeriods.length && (r = e.extend(!0, [], M.highlightedDates), e.each(n.highlightedPeriods, (function(t, n) {
                    var o, i, s, d, u, f, c;
                    if (e.isArray(n)) o = n[0], i = n[1], s = n[2], c = n[3];
                    else {
                        var m = e.map(n.split(","), e.trim);
                        o = a.parseDate(m[0], M.formatDate), i = a.parseDate(m[1], M.formatDate), s = m[2], c = m[3]
                    }
                    for (; o <= i;) d = new l(o, s, c), u = a.formatDate(o, M.formatDate), o.setDate(o.getDate() + 1), void 0 !== r[u] ? (f = r[u].desc) && f.length && d.desc && d.desc.length && (r[u].desc = f + "\n" + d.desc) : r[u] = d
                })), M.highlightedDates = e.extend(!0, [], r)), n.disabledDates && e.isArray(n.disabledDates) && n.disabledDates.length && (M.disabledDates = e.extend(!0, [], n.disabledDates)), n.disabledWeekDays && e.isArray(n.disabledWeekDays) && n.disabledWeekDays.length && (M.disabledWeekDays = e.extend(!0, [], n.disabledWeekDays)), !M.open && !M.opened || M.inline || t.trigger("open.xdsoft"), M.inline && (z = !0, _.addClass("xdsoft_inline"), t.after(_).hide()), M.inverseButton && (M.next = "xdsoft_prev", M.prev = "xdsoft_next"), M.datepicker ? F.addClass("active") : F.removeClass("active"), M.timepicker ? A.addClass("active") : A.removeClass("active"), M.value && (w.setCurrentTime(M.value), t && t.val && t.val(w.str)), isNaN(M.dayOfWeekStart) ? M.dayOfWeekStart = 0 : M.dayOfWeekStart = parseInt(M.dayOfWeekStart, 10) % 7, M.timepickerScrollbar || Y.xdsoftScroller(M, "hide"), M.minDate && /^[\+\-](.*)$/.test(M.minDate) && (M.minDate = a.formatDate(w.strToDateTime(M.minDate), M.formatDate)), M.maxDate && /^[\+\-](.*)$/.test(M.maxDate) && (M.maxDate = a.formatDate(w.strToDateTime(M.maxDate), M.formatDate)), M.minDateTime && /^\+(.*)$/.test(M.minDateTime) && (M.minDateTime = w.strToDateTime(M.minDateTime).dateFormat(M.formatDate)), M.maxDateTime && /^\+(.*)$/.test(M.maxDateTime) && (M.maxDateTime = w.strToDateTime(M.maxDateTime).dateFormat(M.formatDate)), H.toggle(M.showApplyButton), C.find(".xdsoft_today_button").css("visibility", M.todayButton ? "visible" : "hidden"), C.find("." + M.prev).css("visibility", M.prevButton ? "visible" : "hidden"), C.find("." + M.next).css("visibility", M.nextButton ? "visible" : "hidden"), E(M), M.validateOnBlur && t.off("blur.xdsoft").on("blur.xdsoft", (function() {
                    if (M.allowBlank && (!e.trim(e(this).val()).length || "string" == typeof M.mask && e.trim(e(this).val()) === M.mask.replace(/[0-9]/g, "_"))) e(this).val(null), _.data("xdsoft_datetime").empty();
                    else {
                        var t = a.parseDate(e(this).val(), M.format);
                        if (t) e(this).val(a.formatDate(t, M.format));
                        else {
                            var n = +[e(this).val()[0], e(this).val()[1]].join(""),
                                r = +[e(this).val()[2], e(this).val()[3]].join("");
                            !M.datepicker && M.timepicker && 0 <= n && n < 24 && 0 <= r && r < 60 ? e(this).val([n, r].map((function(e) {
                                return 9 < e ? e : "0" + e
                            })).join(":")) : e(this).val(a.formatDate(w.now(), M.format))
                        }
                        _.data("xdsoft_datetime").setCurrentTime(e(this).val())
                    }
                    _.trigger("changedatetime.xdsoft"), _.trigger("close.xdsoft")
                })), M.dayOfWeekStartPrev = 0 === M.dayOfWeekStart ? 6 : M.dayOfWeekStart - 1, _.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft")
            }, _.data("options", M).on("touchstart mousedown.xdsoft", (function(e) {
                return e.stopPropagation(), e.preventDefault(), j.hide(), J.hide(), !1
            })), Y.append(N), Y.xdsoftScroller(M), _.on("afterOpen.xdsoft", (function() {
                Y.xdsoftScroller(M)
            })), _.append(F).append(A), !0 !== M.withoutCopyright && _.append(W), F.append(C).append(P).append(H), M.insideParent ? e(t).parent().append(_) : e(M.parentID).append(_), w = new function() {
                var t = this;
                t.now = function(e) {
                    var a, n, r = new Date;
                    return !e && M.defaultDate && (a = t.strToDateTime(M.defaultDate), r.setFullYear(a.getFullYear()), r.setMonth(a.getMonth()), r.setDate(a.getDate())), r.setFullYear(r.getFullYear()), !e && M.defaultTime && (n = t.strtotime(M.defaultTime), r.setHours(n.getHours()), r.setMinutes(n.getMinutes()), r.setSeconds(n.getSeconds()), r.setMilliseconds(n.getMilliseconds())), r
                }, t.isValidDate = function(e) {
                    return "[object Date]" === Object.prototype.toString.call(e) && !isNaN(e.getTime())
                }, t.setCurrentTime = function(e, a) {
                    "string" == typeof e ? t.currentTime = t.strToDateTime(e) : t.isValidDate(e) ? t.currentTime = e : e || a || !M.allowBlank || M.inline ? t.currentTime = t.now() : t.currentTime = null, _.trigger("xchange.xdsoft")
                }, t.empty = function() {
                    t.currentTime = null
                }, t.getCurrentTime = function() {
                    return t.currentTime
                }, t.nextMonth = function() {
                    void 0 !== t.currentTime && null !== t.currentTime || (t.currentTime = t.now());
                    var a, n = t.currentTime.getMonth() + 1;
                    return 12 === n && (t.currentTime.setFullYear(t.currentTime.getFullYear() + 1), n = 0), a = t.currentTime.getFullYear(), t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(), n + 1, 0).getDate(), t.currentTime.getDate())), t.currentTime.setMonth(n), M.onChangeMonth && e.isFunction(M.onChangeMonth) && M.onChangeMonth.call(_, w.currentTime, _.data("input")), a !== t.currentTime.getFullYear() && e.isFunction(M.onChangeYear) && M.onChangeYear.call(_, w.currentTime, _.data("input")), _.trigger("xchange.xdsoft"), n
                }, t.prevMonth = function() {
                    void 0 !== t.currentTime && null !== t.currentTime || (t.currentTime = t.now());
                    var a = t.currentTime.getMonth() - 1;
                    return -1 === a && (t.currentTime.setFullYear(t.currentTime.getFullYear() - 1), a = 11), t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(), a + 1, 0).getDate(), t.currentTime.getDate())), t.currentTime.setMonth(a), M.onChangeMonth && e.isFunction(M.onChangeMonth) && M.onChangeMonth.call(_, w.currentTime, _.data("input")), _.trigger("xchange.xdsoft"), a
                }, t.getWeekOfYear = function(t) {
                    if (M.onGetWeekOfYear && e.isFunction(M.onGetWeekOfYear)) {
                        var a = M.onGetWeekOfYear.call(_, t);
                        if (void 0 !== a) return a
                    }
                    var n = new Date(t.getFullYear(), 0, 1);
                    return 4 !== n.getDay() && n.setMonth(0, 1 + (4 - n.getDay() + 7) % 7), Math.ceil(((t - n) / 864e5 + n.getDay() + 1) / 7)
                }, t.strToDateTime = function(e) {
                    var n, r, o = [];
                    return e && e instanceof Date && t.isValidDate(e) ? e : ((o = /^([+-]{1})(.*)$/.exec(e)) && (o[2] = a.parseDate(o[2], M.formatDate)), r = o && o[2] ? (n = o[2].getTime() - 6e4 * o[2].getTimezoneOffset(), new Date(t.now(!0).getTime() + parseInt(o[1] + "1", 10) * n)) : e ? a.parseDate(e, M.format) : t.now(), t.isValidDate(r) || (r = t.now()), r)
                }, t.strToDate = function(e) {
                    if (e && e instanceof Date && t.isValidDate(e)) return e;
                    var n = e ? a.parseDate(e, M.formatDate) : t.now(!0);
                    return t.isValidDate(n) || (n = t.now(!0)), n
                }, t.strtotime = function(e) {
                    if (e && e instanceof Date && t.isValidDate(e)) return e;
                    var n = e ? a.parseDate(e, M.formatTime) : t.now(!0);
                    return t.isValidDate(n) || (n = t.now(!0)), n
                }, t.str = function() {
                    var e = M.format;
                    return M.yearOffset && (e = (e = e.replace("Y", t.currentTime.getFullYear() + M.yearOffset)).replace("y", String(t.currentTime.getFullYear() + M.yearOffset).substring(2, 4))), a.formatDate(t.currentTime, e)
                }, t.currentTime = this.now()
            }, H.on("touchend click", (function(e) {
                e.preventDefault(), _.data("changed", !0), w.setCurrentTime(B()), t.val(w.str()), _.trigger("close.xdsoft")
            })), C.find(".xdsoft_today_button").on("touchend mousedown.xdsoft", (function() {
                _.data("changed", !0), w.setCurrentTime(0, !0), _.trigger("afterOpen.xdsoft")
            })).on("dblclick.xdsoft", (function() {
                var e, a, n = w.getCurrentTime();
                n = new Date(n.getFullYear(), n.getMonth(), n.getDate()), e = w.strToDate(M.minDate), n < (e = new Date(e.getFullYear(), e.getMonth(), e.getDate())) || (a = w.strToDate(M.maxDate), (a = new Date(a.getFullYear(), a.getMonth(), a.getDate())) < n || (t.val(w.str()), t.trigger("change"), _.trigger("close.xdsoft")))
            })), C.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", (function() {
                var t = e(this),
                    a = 0,
                    n = !1;
                ! function e(r) {
                    t.hasClass(M.next) ? w.nextMonth() : t.hasClass(M.prev) && w.prevMonth(), M.monthChangeSpinner && (n || (a = setTimeout(e, r || 100)))
                }(500), e([M.ownerDocument.body, M.contentWindow]).on("touchend mouseup.xdsoft", (function t() {
                    clearTimeout(a), n = !0, e([M.ownerDocument.body, M.contentWindow]).off("touchend mouseup.xdsoft", t)
                }))
            })), A.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", (function() {
                var t = e(this),
                    a = 0,
                    n = !1,
                    r = 110;
                ! function e(o) {
                    var i = Y[0].clientHeight,
                        s = N[0].offsetHeight,
                        d = Math.abs(parseInt(N.css("marginTop"), 10));
                    t.hasClass(M.next) && s - i - M.timeHeightInTimePicker >= d ? N.css("marginTop", "-" + (d + M.timeHeightInTimePicker) + "px") : t.hasClass(M.prev) && 0 <= d - M.timeHeightInTimePicker && N.css("marginTop", "-" + (d - M.timeHeightInTimePicker) + "px"), Y.trigger("scroll_element.xdsoft_scroller", [Math.abs(parseInt(N[0].style.marginTop, 10) / (s - i))]), r = 10 < r ? 10 : r - 10, n || (a = setTimeout(e, o || r))
                }(500), e([M.ownerDocument.body, M.contentWindow]).on("touchend mouseup.xdsoft", (function t() {
                    clearTimeout(a), n = !0, e([M.ownerDocument.body, M.contentWindow]).off("touchend mouseup.xdsoft", t)
                }))
            })), o = 0, _.on("xchange.xdsoft", (function(i) {
                clearTimeout(o), o = setTimeout((function() {
                    void 0 !== w.currentTime && null !== w.currentTime || (w.currentTime = w.now());
                    for (var o, i, s, d, u, l, f, c, m, h, g = "", p = new Date(w.currentTime.getFullYear(), w.currentTime.getMonth(), 1, 12, 0, 0), y = 0, x = w.now(), T = !1, D = !1, v = !1, b = !1, k = [], S = !0, O = ""; p.getDay() !== M.dayOfWeekStart;) p.setDate(p.getDate() - 1);
                    for (g += "<table><thead><tr>", M.weeks && (g += "<th></th>"), o = 0; o < 7; o += 1) g += "<th>" + M.i18n[r].dayOfWeekShort[(o + M.dayOfWeekStart) % 7] + "</th>";
                    for (g += "</tr></thead>", g += "<tbody>", !1 !== M.maxDate && (T = w.strToDate(M.maxDate), T = new Date(T.getFullYear(), T.getMonth(), T.getDate(), 23, 59, 59, 999)), !1 !== M.minDate && (D = w.strToDate(M.minDate), D = new Date(D.getFullYear(), D.getMonth(), D.getDate())), !1 !== M.minDateTime && (v = w.strToDate(M.minDateTime), v = new Date(v.getFullYear(), v.getMonth(), v.getDate(), v.getHours(), v.getMinutes(), v.getSeconds())), !1 !== M.maxDateTime && (b = w.strToDate(M.maxDateTime), b = new Date(b.getFullYear(), b.getMonth(), b.getDate(), b.getHours(), b.getMinutes(), b.getSeconds())), !1 !== b && (h = 31 * (12 * b.getFullYear() + b.getMonth()) + b.getDate()); y < w.currentTime.countDaysInMonth() || p.getDay() !== M.dayOfWeekStart || w.currentTime.getMonth() === p.getMonth();) {
                        k = [], y += 1, s = p.getDay(), d = p.getDate(), u = p.getFullYear(), H = p.getMonth(), l = w.getWeekOfYear(p), m = "", k.push("xdsoft_date"), f = M.beforeShowDay && e.isFunction(M.beforeShowDay.call) ? M.beforeShowDay.call(_, p) : null, M.allowDateRe && "[object RegExp]" === Object.prototype.toString.call(M.allowDateRe) && (M.allowDateRe.test(a.formatDate(p, M.formatDate)) || k.push("xdsoft_disabled")), M.allowDates && 0 < M.allowDates.length && -1 === M.allowDates.indexOf(a.formatDate(p, M.formatDate)) && k.push("xdsoft_disabled");
                        var W = 31 * (12 * p.getFullYear() + p.getMonth()) + p.getDate();
                        (!1 !== T && T < p || !1 !== v && p < v || !1 !== D && p < D || !1 !== b && h < W || f && !1 === f[0]) && k.push("xdsoft_disabled"), -1 !== M.disabledDates.indexOf(a.formatDate(p, M.formatDate)) && k.push("xdsoft_disabled"), -1 !== M.disabledWeekDays.indexOf(s) && k.push("xdsoft_disabled"), t.is("[disabled]") && k.push("xdsoft_disabled"), f && "" !== f[1] && k.push(f[1]), w.currentTime.getMonth() !== H && k.push("xdsoft_other_month"), (M.defaultSelect || _.data("changed")) && a.formatDate(w.currentTime, M.formatDate) === a.formatDate(p, M.formatDate) && k.push("xdsoft_current"), a.formatDate(x, M.formatDate) === a.formatDate(p, M.formatDate) && k.push("xdsoft_today"), 0 !== p.getDay() && 6 !== p.getDay() && -1 === M.weekends.indexOf(a.formatDate(p, M.formatDate)) || k.push("xdsoft_weekend"), void 0 !== M.highlightedDates[a.formatDate(p, M.formatDate)] && (i = M.highlightedDates[a.formatDate(p, M.formatDate)], k.push(void 0 === i.style ? "xdsoft_highlighted_default" : i.style), m = void 0 === i.desc ? "" : i.desc), M.beforeShowDay && e.isFunction(M.beforeShowDay) && k.push(M.beforeShowDay(p)), S && (g += "<tr>", S = !1, M.weeks && (g += "<th>" + l + "</th>")), g += '<td data-date="' + d + '" data-month="' + H + '" data-year="' + u + '" class="xdsoft_date xdsoft_day_of_week' + p.getDay() + " " + k.join(" ") + '" title="' + m + '"><div>' + d + "</div></td>", p.getDay() === M.dayOfWeekStartPrev && (g += "</tr>", S = !0), p.setDate(d + 1)
                    }
                    g += "</tbody></table>", P.html(g), C.find(".xdsoft_label span").eq(0).text(M.i18n[r].months[w.currentTime.getMonth()]), C.find(".xdsoft_label span").eq(1).text(w.currentTime.getFullYear() + M.yearOffset), H = O = "";
                    var F = 0;
                    if (!1 !== M.minTime) {
                        var A = w.strtotime(M.minTime);
                        F = 60 * A.getHours() + A.getMinutes()
                    }
                    var Y = 1440;
                    if (!1 !== M.maxTime && (A = w.strtotime(M.maxTime), Y = 60 * A.getHours() + A.getMinutes()), !1 !== M.minDateTime && (A = w.strToDateTime(M.minDateTime), a.formatDate(w.currentTime, M.formatDate) === a.formatDate(A, M.formatDate))) {
                        var H = 60 * A.getHours() + A.getMinutes();
                        F < H && (F = H)
                    }
                    if (!1 !== M.maxDateTime && (A = w.strToDateTime(M.maxDateTime), a.formatDate(w.currentTime, M.formatDate) === a.formatDate(A, M.formatDate) && (H = 60 * A.getHours() + A.getMinutes()) < Y && (Y = H)), c = function(n, r) {
                            var o, i = w.now(),
                                s = M.allowTimes && e.isArray(M.allowTimes) && M.allowTimes.length;
                            i.setHours(n), n = parseInt(i.getHours(), 10), i.setMinutes(r), r = parseInt(i.getMinutes(), 10), k = [];
                            var d = 60 * n + r;
                            (t.is("[disabled]") || Y <= d || d < F) && k.push("xdsoft_disabled"), (o = new Date(w.currentTime)).setHours(parseInt(w.currentTime.getHours(), 10)), s || o.setMinutes(Math[M.roundTime](w.currentTime.getMinutes() / M.step) * M.step), (M.initTime || M.defaultSelect || _.data("changed")) && o.getHours() === parseInt(n, 10) && (!s && 59 < M.step || o.getMinutes() === parseInt(r, 10)) && (M.defaultSelect || _.data("changed") ? k.push("xdsoft_current") : M.initTime && k.push("xdsoft_init_time")), parseInt(x.getHours(), 10) === parseInt(n, 10) && parseInt(x.getMinutes(), 10) === parseInt(r, 10) && k.push("xdsoft_today"), O += '<div class="xdsoft_time ' + k.join(" ") + '" data-hour="' + n + '" data-minute="' + r + '">' + a.formatDate(i, M.formatTime) + "</div>"
                        }, M.allowTimes && e.isArray(M.allowTimes) && M.allowTimes.length)
                        for (y = 0; y < M.allowTimes.length; y += 1) c(w.strtotime(M.allowTimes[y]).getHours(), H = w.strtotime(M.allowTimes[y]).getMinutes());
                    else
                        for (o = y = 0; y < (M.hours12 ? 12 : 24); y += 1)
                            for (o = 0; o < 60; o += M.step) {
                                var z = 60 * y + o;
                                z < F || Y <= z || c((y < 10 ? "0" : "") + y, H = (o < 10 ? "0" : "") + o)
                            }
                    for (N.html(O), n = "", y = parseInt(M.yearStart, 10); y <= parseInt(M.yearEnd, 10); y += 1) n += '<div class="xdsoft_option ' + (w.currentTime.getFullYear() === y ? "xdsoft_current" : "") + '" data-value="' + y + '">' + (y + M.yearOffset) + "</div>";
                    for (j.children().eq(0).html(n), y = parseInt(M.monthStart, 10), n = ""; y <= parseInt(M.monthEnd, 10); y += 1) n += '<div class="xdsoft_option ' + (w.currentTime.getMonth() === y ? "xdsoft_current" : "") + '" data-value="' + y + '">' + M.i18n[r].months[y] + "</div>";
                    J.children().eq(0).html(n), e(_).trigger("generate.xdsoft")
                }), 10), i.stopPropagation()
            })).on("afterOpen.xdsoft", (function() {
                var e, t, a, n;
                M.timepicker && (N.find(".xdsoft_current").length ? e = ".xdsoft_current" : N.find(".xdsoft_init_time").length && (e = ".xdsoft_init_time"), e ? (t = Y[0].clientHeight, (a = N[0].offsetHeight) - t < (n = N.find(e).index() * M.timeHeightInTimePicker + 1) && (n = a - t), Y.trigger("scroll_element.xdsoft_scroller", [parseInt(n, 10) / (a - t)])) : Y.trigger("scroll_element.xdsoft_scroller", [0]))
            })), i = 0, P.on("touchend click.xdsoft", "td", (function(a) {
                a.stopPropagation(), i += 1;
                var n = e(this),
                    r = w.currentTime;
                if (null == r && (w.currentTime = w.now(), r = w.currentTime), n.hasClass("xdsoft_disabled")) return !1;
                r.setDate(1), r.setFullYear(n.data("year")), r.setMonth(n.data("month")), r.setDate(n.data("date")), _.trigger("select.xdsoft", [r]), t.val(w.str()), M.onSelectDate && e.isFunction(M.onSelectDate) && M.onSelectDate.call(_, w.currentTime, _.data("input"), a), _.data("changed", !0), _.trigger("xchange.xdsoft"), _.trigger("changedatetime.xdsoft"), (1 < i || !0 === M.closeOnDateSelect || !1 === M.closeOnDateSelect && !M.timepicker) && !M.inline && _.trigger("close.xdsoft"), setTimeout((function() {
                    i = 0
                }), 200)
            })), N.on("touchstart", "div", (function(e) {
                this.touchMoved = !1
            })).on("touchmove", "div", I).on("touchend click.xdsoft", "div", (function(t) {
                if (!this.touchMoved) {
                    t.stopPropagation();
                    var a = e(this),
                        n = w.currentTime;
                    if (null == n && (w.currentTime = w.now(), n = w.currentTime), a.hasClass("xdsoft_disabled")) return !1;
                    n.setHours(a.data("hour")), n.setMinutes(a.data("minute")), _.trigger("select.xdsoft", [n]), _.data("input").val(w.str()), M.onSelectTime && e.isFunction(M.onSelectTime) && M.onSelectTime.call(_, w.currentTime, _.data("input"), t), _.data("changed", !0), _.trigger("xchange.xdsoft"), _.trigger("changedatetime.xdsoft"), !0 !== M.inline && !0 === M.closeOnTimeSelect && _.trigger("close.xdsoft")
                }
            })), F.on("mousewheel.xdsoft", (function(e) {
                return !M.scrollMonth || (e.deltaY < 0 ? w.nextMonth() : w.prevMonth(), !1)
            })), t.on("mousewheel.xdsoft", (function(e) {
                return !M.scrollInput || (!M.datepicker && M.timepicker ? (0 <= (s = N.find(".xdsoft_current").length ? N.find(".xdsoft_current").eq(0).index() : 0) + e.deltaY && s + e.deltaY < N.children().length && (s += e.deltaY), N.children().eq(s).length && N.children().eq(s).trigger("mousedown"), !1) : M.datepicker && !M.timepicker ? (F.trigger(e, [e.deltaY, e.deltaX, e.deltaY]), t.val && t.val(w.str()), _.trigger("changedatetime.xdsoft"), !1) : void 0)
            })), _.on("changedatetime.xdsoft", (function(t) {
                if (M.onChangeDateTime && e.isFunction(M.onChangeDateTime)) {
                    var a = _.data("input");
                    M.onChangeDateTime.call(_, w.currentTime, a, t), delete M.value, a.trigger("change")
                }
            })).on("generate.xdsoft", (function() {
                M.onGenerate && e.isFunction(M.onGenerate) && M.onGenerate.call(_, w.currentTime, _.data("input")), z && (_.trigger("afterOpen.xdsoft"), z = !1)
            })).on("click.xdsoft", (function(e) {
                e.stopPropagation()
            })), s = 0, O = function(e, t) {
                do {
                    if (!(e = e.parentNode) || !1 === t(e)) break
                } while ("HTML" !== e.nodeName)
            }, d = function() {
                var t, a, n, r, o, i, s, d, u, l, f, c, m;
                if (t = (d = _.data("input")).offset(), a = d[0], l = "top", n = t.top + a.offsetHeight - 1, r = t.left, o = "absolute", u = e(M.contentWindow).width(), c = e(M.contentWindow).height(), m = e(M.contentWindow).scrollTop(), M.ownerDocument.documentElement.clientWidth - t.left < F.parent().outerWidth(!0)) {
                    var h = F.parent().outerWidth(!0) - a.offsetWidth;
                    r -= h
                }
                "rtl" === d.parent().css("direction") && (r -= _.outerWidth() - d.outerWidth()), M.fixed ? (n -= m, r -= e(M.contentWindow).scrollLeft(), o = "fixed") : (s = !1, O(a, (function(e) {
                    return null !== e && ("fixed" === M.contentWindow.getComputedStyle(e).getPropertyValue("position") ? !(s = !0) : void 0)
                })), s && !M.insideParent ? (o = "fixed", n + _.outerHeight() > c + m ? (l = "bottom", n = c + m - t.top) : n -= m) : n + _[0].offsetHeight > c + m && (n = t.top - _[0].offsetHeight + 1), n < 0 && (n = 0), r + a.offsetWidth > u && (r = u - a.offsetWidth)), i = _[0], O(i, (function(e) {
                    if ("relative" === M.contentWindow.getComputedStyle(e).getPropertyValue("position") && u >= e.offsetWidth) return r -= (u - e.offsetWidth) / 2, !1
                })), f = {
                    position: o,
                    left: M.insideParent ? a.offsetLeft : r,
                    top: "",
                    bottom: ""
                }, M.insideParent ? f[l] = a.offsetTop + a.offsetHeight : f[l] = n, _.css(f)
            }, _.on("open.xdsoft", (function(t) {
                var a = !0;
                M.onShow && e.isFunction(M.onShow) && (a = M.onShow.call(_, w.currentTime, _.data("input"), t)), !1 !== a && (_.show(), d(), e(M.contentWindow).off("resize.xdsoft", d).on("resize.xdsoft", d), M.closeOnWithoutClick && e([M.ownerDocument.body, M.contentWindow]).on("touchstart mousedown.xdsoft", (function t() {
                    _.trigger("close.xdsoft"), e([M.ownerDocument.body, M.contentWindow]).off("touchstart mousedown.xdsoft", t)
                })))
            })).on("close.xdsoft", (function(t) {
                var a = !0;
                C.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide(), M.onClose && e.isFunction(M.onClose) && (a = M.onClose.call(_, w.currentTime, _.data("input"), t)), !1 === a || M.opened || M.inline || _.hide(), t.stopPropagation()
            })).on("toggle.xdsoft", (function() {
                _.is(":visible") ? _.trigger("close.xdsoft") : _.trigger("open.xdsoft")
            })).data("input", t), L = 0, _.data("xdsoft_datetime", w), _.setOptions(M), w.setCurrentTime(B()), t.data("xdsoft_datetimepicker", _).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", (function() {
                t.is(":disabled") || t.data("xdsoft_datetimepicker").is(":visible") && M.closeOnInputClick || M.openOnFocus && (clearTimeout(L), L = setTimeout((function() {
                    t.is(":disabled") || (z = !0, w.setCurrentTime(B(), !0), M.mask && E(M), _.trigger("open.xdsoft"))
                }), 100))
            })).on("keydown.xdsoft", (function(t) {
                var a, n = t.which;
                return -1 !== [f].indexOf(n) && M.enterLikeTab ? (a = e("input:visible,textarea:visible,button:visible,a:visible"), _.trigger("close.xdsoft"), a.eq(a.index(this) + 1).focus(), !1) : -1 !== [y].indexOf(n) ? (_.trigger("close.xdsoft"), !0) : void 0
            })).on("blur.xdsoft", (function() {
                _.trigger("close.xdsoft")
            }))
        }, s = function(t) {
            var a = t.data("xdsoft_datetimepicker");
            a && (a.data("xdsoft_datetime", null), a.remove(), t.data("xdsoft_datetimepicker", null).off(".xdsoft"), e(M.contentWindow).off("resize.xdsoft"), e([M.contentWindow, M.ownerDocument.body]).off("mousedown.xdsoft touchstart"), t.unmousewheel && t.unmousewheel())
        }, e(M.ownerDocument).off("keydown.xdsoftctrl keyup.xdsoftctrl").off("keydown.xdsoftcmd keyup.xdsoftcmd").on("keydown.xdsoftctrl", (function(e) {
            e.keyCode === u && (S = !0)
        })).on("keyup.xdsoftctrl", (function(e) {
            e.keyCode === u && (S = !1)
        })).on("keydown.xdsoftcmd", (function(e) {
            e.keyCode
        })).on("keyup.xdsoftcmd", (function(e) {
            e.keyCode
        })), this.each((function() {
            var t, r = e(this).data("xdsoft_datetimepicker");
            if (r) {
                if ("string" === e.type(n)) switch (n) {
                    case "show":
                        e(this).select().focus(), r.trigger("open.xdsoft");
                        break;
                    case "hide":
                        r.trigger("close.xdsoft");
                        break;
                    case "toggle":
                        r.trigger("toggle.xdsoft");
                        break;
                    case "destroy":
                        s(e(this));
                        break;
                    case "reset":
                        this.value = this.defaultValue, this.value && r.data("xdsoft_datetime").isValidDate(a.parseDate(this.value, M.format)) || r.data("changed", !1), r.data("xdsoft_datetime").setCurrentTime(this.value);
                        break;
                    case "validate":
                        r.data("input").trigger("blur.xdsoft");
                        break;
                    default:
                        r[n] && e.isFunction(r[n]) && (d = r[n](o))
                } else r.setOptions(n);
                return 0
            }
            "string" !== e.type(n) && (!M.lazyInit || M.open || M.inline ? i(e(this)) : (t = e(this)).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", (function e() {
                t.is(":disabled") || t.data("xdsoft_datetimepicker") || (clearTimeout(w), w = setTimeout((function() {
                    t.data("xdsoft_datetimepicker") || i(t), t.off("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", e).trigger("open.xdsoft")
                }), 100))
            })))
        })), d
    }, e.fn.datetimepicker.defaults = t
};
! function(e) {
    "function" == typeof define && define.amd ? define(["jquery", "jquery-mousewheel"], e) : "object" == ("undefined" == typeof exports ? "undefined" : _typeof(exports)) ? module.exports = e(require("jquery")) : e(jQuery)
}(datetimepickerFactory),
function(e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == ("undefined" == typeof exports ? "undefined" : _typeof(exports)) ? module.exports = e : e(jQuery)
}((function(e) {
    var t, a, n = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
        r = "onwheel" in document || 9 <= document.documentMode ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
        o = Array.prototype.slice;
    if (e.event.fixHooks)
        for (var i = n.length; i;) e.event.fixHooks[n[--i]] = e.event.mouseHooks;
    var s = e.event.special.mousewheel = {
        version: "3.1.12",
        setup: function() {
            if (this.addEventListener)
                for (var t = r.length; t;) this.addEventListener(r[--t], d, !1);
            else this.onmousewheel = d;
            e.data(this, "mousewheel-line-height", s.getLineHeight(this)), e.data(this, "mousewheel-page-height", s.getPageHeight(this))
        },
        teardown: function() {
            if (this.removeEventListener)
                for (var t = r.length; t;) this.removeEventListener(r[--t], d, !1);
            else this.onmousewheel = null;
            e.removeData(this, "mousewheel-line-height"), e.removeData(this, "mousewheel-page-height")
        },
        getLineHeight: function(t) {
            var a = e(t),
                n = a["offsetParent" in e.fn ? "offsetParent" : "parent"]();
            return n.length || (n = e("body")), parseInt(n.css("fontSize"), 10) || parseInt(a.css("fontSize"), 10) || 16
        },
        getPageHeight: function(t) {
            return e(t).height()
        },
        settings: {
            adjustOldDeltas: !0,
            normalizeOffset: !0
        }
    };

    function d(n) {
        var r, i = n || window.event,
            d = o.call(arguments, 1),
            f = 0,
            c = 0,
            m = 0,
            h = 0,
            g = 0;
        if ((n = e.event.fix(i)).type = "mousewheel", "detail" in i && (m = -1 * i.detail), "wheelDelta" in i && (m = i.wheelDelta), "wheelDeltaY" in i && (m = i.wheelDeltaY), "wheelDeltaX" in i && (c = -1 * i.wheelDeltaX), "axis" in i && i.axis === i.HORIZONTAL_AXIS && (c = -1 * m, m = 0), f = 0 === m ? c : m, "deltaY" in i && (f = m = -1 * i.deltaY), "deltaX" in i && (c = i.deltaX, 0 === m && (f = -1 * c)), 0 !== m || 0 !== c) {
            if (1 === i.deltaMode) {
                var p = e.data(this, "mousewheel-line-height");
                f *= p, m *= p, c *= p
            } else if (2 === i.deltaMode) {
                var y = e.data(this, "mousewheel-page-height");
                f *= y, m *= y, c *= y
            }
            if (r = Math.max(Math.abs(m), Math.abs(c)), (!a || r < a) && l(i, a = r) && (a /= 40), l(i, r) && (f /= 40, c /= 40, m /= 40), f = Math[1 <= f ? "floor" : "ceil"](f / a), c = Math[1 <= c ? "floor" : "ceil"](c / a), m = Math[1 <= m ? "floor" : "ceil"](m / a), s.settings.normalizeOffset && this.getBoundingClientRect) {
                var x = this.getBoundingClientRect();
                h = n.clientX - x.left, g = n.clientY - x.top
            }
            return n.deltaX = c, n.deltaY = m, n.deltaFactor = a, n.offsetX = h, n.offsetY = g, n.deltaMode = 0, d.unshift(n, f, c, m), t && clearTimeout(t), t = setTimeout(u, 200), (e.event.dispatch || e.event.handle).apply(this, d)
        }
    }

    function u() {
        a = null
    }

    function l(e, t) {
        return s.settings.adjustOldDeltas && "mousewheel" === e.type && t % 120 == 0
    }
    e.fn.extend({
        mousewheel: function(e) {
            return e ? this.bind("mousewheel", e) : this.trigger("mousewheel")
        },
        unmousewheel: function(e) {
            return this.unbind("mousewheel", e)
        }
    })
}));